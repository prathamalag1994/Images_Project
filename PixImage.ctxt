#BlueJ class context
comment0.params=width\ height
comment0.target=PixImage(int,\ int)
comment0.text=\n\ PixImage()\ constructs\ an\ empty\ PixImage\ with\ a\ specified\ width\ and\ height.\n\ Every\ pixel\ has\ red,\ green,\ and\ blue\ intensities\ of\ zero\ (solid\ black).\n\n\ @param\ width\ the\ width\ of\ the\ image.\n\ @param\ height\ the\ height\ of\ the\ image.\n
comment1.params=
comment1.target=int\ getWidth()
comment1.text=\n\ getWidth()\ returns\ the\ width\ of\ the\ image.\n\n\ @return\ the\ width\ of\ the\ image.\n
comment10.params=
comment10.target=PixImage\ sobelEdges()
comment10.text=\n\ sobelEdges()\ applies\ the\ Sobel\ operator,\ identifying\ edges\ in\ "this"\n\ image.\ \ The\ Sobel\ operator\ computes\ a\ magnitude\ that\ represents\ how\n\ strong\ the\ edge\ is.\ \ We\ compute\ separate\ gradients\ for\ the\ red,\ blue,\ and\n\ green\ components\ at\ each\ pixel,\ then\ sum\ the\ squares\ of\ the\ three\n\ gradients\ at\ each\ pixel.\ \ We\ convert\ the\ squared\ magnitude\ at\ each\ pixel\n\ into\ a\ grayscale\ pixel\ intensity\ in\ the\ range\ 0...255\ with\ the\ logarithmic\n\ mapping\ encoded\ in\ mag2gray().\ \ The\ output\ is\ a\ grayscale\ PixImage\ whose\n\ pixel\ intensities\ reflect\ the\ strength\ of\ the\ edges.\n\n\ See\ http\://en.wikipedia.org/wiki/Sobel_operator\#Formulation\ for\ details.\n\n\ @return\ a\ grayscale\ PixImage\ representing\ the\ edges\ of\ the\ input\ image.\n\ Whiter\ pixels\ represent\ stronger\ edges.\n
comment11.params=b\ msg
comment11.target=void\ doTest(boolean,\ java.lang.String)
comment11.text=\n\ doTest()\ checks\ whether\ the\ condition\ is\ true\ and\ prints\ the\ given\ error\n\ message\ if\ it\ is\ not.\n\n\ @param\ b\ the\ condition\ to\ check.\n\ @param\ msg\ the\ error\ message\ to\ print\ if\ the\ condition\ is\ false.\n
comment12.params=pixels
comment12.target=PixImage\ array2PixImage(int[][])
comment12.text=\n\ array2PixImage()\ converts\ a\ 2D\ array\ of\ grayscale\ intensities\ to\n\ a\ grayscale\ PixImage.\n\n\ @param\ pixels\ a\ 2D\ array\ of\ grayscale\ intensities\ in\ the\ range\ 0...255.\n\ @return\ a\ new\ PixImage\ whose\ red,\ green,\ and\ blue\ values\ are\ equal\ to\n\ the\ input\ grayscale\ intensities.\n
comment13.params=image
comment13.target=boolean\ equals(PixImage)
comment13.text=\n\ equals()\ checks\ whether\ two\ images\ are\ the\ same,\ i.e.\ have\ the\ same\n\ dimensions\ and\ pixels.\n\n\ @param\ image\ a\ PixImage\ to\ compare\ with\ "this"\ PixImage.\n\ @return\ true\ if\ the\ specified\ PixImage\ is\ identical\ to\ "this"\ PixImage.\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\n\ main()\ runs\ a\ series\ of\ tests\ to\ ensure\ that\ the\ convolutions\ (box\ blur\n\ and\ Sobel)\ are\ correct.\n
comment2.params=
comment2.target=int\ getHeight()
comment2.text=\n\ getHeight()\ returns\ the\ height\ of\ the\ image.\n\n\ @return\ the\ height\ of\ the\ image.\n
comment3.params=x\ y
comment3.target=short\ getRed(int,\ int)
comment3.text=\n\ getRed()\ returns\ the\ red\ intensity\ of\ the\ pixel\ at\ coordinate\ (x,\ y).\n\n\ @param\ x\ the\ x-coordinate\ of\ the\ pixel.\n\ @param\ y\ the\ y-coordinate\ of\ the\ pixel.\n\ @return\ the\ red\ intensity\ of\ the\ pixel\ at\ coordinate\ (x,\ y).\n
comment4.params=x\ y
comment4.target=short\ getGreen(int,\ int)
comment4.text=\n\ getGreen()\ returns\ the\ green\ intensity\ of\ the\ pixel\ at\ coordinate\ (x,\ y).\n\n\ @param\ x\ the\ x-coordinate\ of\ the\ pixel.\n\ @param\ y\ the\ y-coordinate\ of\ the\ pixel.\n\ @return\ the\ green\ intensity\ of\ the\ pixel\ at\ coordinate\ (x,\ y).\n
comment5.params=x\ y
comment5.target=short\ getBlue(int,\ int)
comment5.text=\n\ getBlue()\ returns\ the\ blue\ intensity\ of\ the\ pixel\ at\ coordinate\ (x,\ y).\n\n\ @param\ x\ the\ x-coordinate\ of\ the\ pixel.\n\ @param\ y\ the\ y-coordinate\ of\ the\ pixel.\n\ @return\ the\ blue\ intensity\ of\ the\ pixel\ at\ coordinate\ (x,\ y).\n
comment6.params=x\ y\ red\ green\ blue
comment6.target=void\ setPixel(int,\ int,\ short,\ short,\ short)
comment6.text=\n\ setPixel()\ sets\ the\ pixel\ at\ coordinate\ (x,\ y)\ to\ specified\ red,\ green,\n\ and\ blue\ intensities.\n\n\ If\ any\ of\ the\ three\ color\ intensities\ is\ NOT\ in\ the\ range\ 0...255,\ then\n\ this\ method\ does\ NOT\ change\ any\ of\ the\ pixel\ intensities.\n\n\ @param\ x\ the\ x-coordinate\ of\ the\ pixel.\n\ @param\ y\ the\ y-coordinate\ of\ the\ pixel.\n\ @param\ red\ the\ new\ red\ intensity\ for\ the\ pixel\ at\ coordinate\ (x,\ y).\n\ @param\ green\ the\ new\ green\ intensity\ for\ the\ pixel\ at\ coordinate\ (x,\ y).\n\ @param\ blue\ the\ new\ blue\ intensity\ for\ the\ pixel\ at\ coordinate\ (x,\ y).\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\n\ toString()\ returns\ a\ String\ representation\ of\ this\ PixImage.\n\n\ This\ method\ isn't\ required,\ but\ it\ should\ be\ very\ useful\ to\ you\ when\n\ you're\ debugging\ your\ code.\ \ It's\ up\ to\ you\ how\ you\ represent\ a\ PixImage\n\ as\ a\ String.\n\n\ @return\ a\ String\ representation\ of\ this\ PixImage.\n
comment8.params=numIterations
comment8.target=PixImage\ boxBlur(int)
comment8.text=\n\ boxBlur()\ returns\ a\ blurred\ version\ of\ "this"\ PixImage.\n\n\ If\ numIterations\ \=\=\ 1,\ each\ pixel\ in\ the\ output\ PixImage\ is\ assigned\n\ a\ value\ equal\ to\ the\ average\ of\ its\ neighboring\ pixels\ in\ "this"\ PixImage,\n\ INCLUDING\ the\ pixel\ itself.\n\n\ A\ pixel\ not\ on\ the\ image\ boundary\ has\ nine\ neighbors--the\ pixel\ itself\ and\n\ the\ eight\ pixels\ surrounding\ it.\ \ A\ pixel\ on\ the\ boundary\ has\ six\n\ neighbors\ if\ it\ is\ not\ a\ corner\ pixel;\ only\ four\ neighbors\ if\ it\ is\n\ a\ corner\ pixel.\ \ The\ average\ of\ the\ neighbors\ is\ the\ sum\ of\ all\ the\n\ neighbor\ pixel\ values\ (including\ the\ pixel\ itself)\ divided\ by\ the\ number\n\ of\ neighbors,\ with\ non-integer\ quotients\ rounded\ toward\ zero\ (as\ Java\ does\n\ naturally\ when\ you\ divide\ two\ integers).\n\n\ Each\ color\ (red,\ green,\ blue)\ is\ blurred\ separately.\ \ The\ red\ input\ should\n\ have\ NO\ effect\ on\ the\ green\ or\ blue\ outputs,\ etc.\n\n\ The\ parameter\ numIterations\ specifies\ a\ number\ of\ repeated\ iterations\ of\n\ box\ blurring\ to\ perform.\ \ If\ numIterations\ is\ zero\ or\ negative,\ "this"\n\ PixImage\ is\ returned\ (not\ a\ copy).\ \ If\ numIterations\ is\ positive,\ the\n\ return\ value\ is\ a\ newly\ constructed\ PixImage.\n\n\ IMPORTANT\:\ \ DO\ NOT\ CHANGE\ "this"\ PixImage\!\!\!\ \ All\ blurring/changes\ should\n\ appear\ in\ the\ new,\ output\ PixImage\ only.\n\n\ @param\ numIterations\ the\ number\ of\ iterations\ of\ box\ blurring.\n\ @return\ a\ blurred\ version\ of\ "this"\ PixImage.\n
comment9.params=mag
comment9.target=short\ mag2gray(long)
comment9.text=\n\ mag2gray()\ maps\ an\ energy\ (squared\ vector\ magnitude)\ in\ the\ range\n\ 0...24,969,600\ to\ a\ grayscale\ intensity\ in\ the\ range\ 0...255.\ \ The\ map\n\ is\ logarithmic,\ but\ shifted\ so\ that\ values\ of\ 5,080\ and\ below\ map\ to\ zero.\n\n\ DO\ NOT\ CHANGE\ THIS\ METHOD.\ \ If\ you\ do,\ you\ will\ not\ be\ able\ to\ get\ the\n\ correct\ images\ and\ pass\ the\ autograder.\n\n\ @param\ mag\ the\ energy\ (squared\ vector\ magnitude)\ of\ the\ pixel\ whose\n\ intensity\ we\ want\ to\ compute.\n\ @return\ the\ intensity\ of\ the\ output\ pixel.\n
numComments=15
