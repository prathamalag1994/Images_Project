#BlueJ class context
comment0.params=width\ height
comment0.target=RunLengthEncoding(int,\ int)
comment0.text=\n\ \ RunLengthEncoding()\ (with\ two\ parameters)\ constructs\ a\ run-length\n\ \ encoding\ of\ a\ black\ PixImage\ of\ the\ specified\ width\ and\ height,\ in\ which\n\ \ every\ pixel\ has\ red,\ green,\ and\ blue\ intensities\ of\ zero.\n\n\ \ @param\ width\ the\ width\ of\ the\ image.\n\ \ @param\ height\ the\ height\ of\ the\ image.\n
comment1.params=width\ height\ red\ green\ blue\ runLengths
comment1.target=RunLengthEncoding(int,\ int,\ int[],\ int[],\ int[],\ int[])
comment1.text=\n\ \ RunLengthEncoding()\ (with\ six\ parameters)\ constructs\ a\ run-length\n\ \ encoding\ of\ a\ PixImage\ of\ the\ specified\ width\ and\ height.\ \ The\ runs\ of\n\ \ the\ run-length\ encoding\ are\ taken\ from\ four\ input\ arrays\ of\ equal\ length.\n\ \ Run\ i\ has\ length\ runLengths[i]\ and\ RGB\ intensities\ red[i],\ green[i],\ and\n\ \ blue[i].\n\n\ \ @param\ width\ the\ width\ of\ the\ image.\n\ \ @param\ height\ the\ height\ of\ the\ image.\n\ \ @param\ red\ is\ an\ array\ that\ specifies\ the\ red\ intensity\ of\ each\ run.\n\ \ @param\ green\ is\ an\ array\ \ \ specifie\ the\ green\ intensity\ of\ each\ run.\n\ \ @param\ blue\ is\ an\ array\ that\ specifies\ sthe\ blue\ intensity\ of\ each\ run.\n\ \ @param\ runLengths\ is\ an\ array\ that\ specifies\ the\ length\ of\ each\ run.\n\n\ \ NOTE\:\ \ All\ four\ input\ arrays\ should\ have\ the\ same\ length\ (not\ zero).\n\ \ All\ pixel\ intensities\ in\ the\ first\ three\ arrays\ should\ be\ in\ the\ range\n\ \ 0...255.\ \ The\ sum\ of\ all\ the\ elements\ of\ the\ runLengths\ array\ should\ be\n\ \ width\ *\ height.\ \ (Feel\ free\ to\ quit\ with\ an\ error\ message\ if\ any\ of\ these\n\ \ conditions\ are\ not\ met--though\ we\ won't\ be\ testing\ that.)\n
comment10.params=x\ y\ red\ green\ blue
comment10.target=void\ setPixel(int,\ int,\ short,\ short,\ short)
comment10.text=\n\ \ setPixel()\ modifies\ this\ run-length\ encoding\ so\ that\ the\ specified\ color\n\ \ is\ stored\ at\ the\ given\ (x,\ y)\ coordinates.\ \ The\ old\ pixel\ value\ at\ that\n\ \ coordinate\ should\ be\ overwritten\ and\ all\ others\ should\ remain\ the\ same.\n\ \ The\ updated\ run-length\ encoding\ should\ be\ compressed\ as\ much\ as\ possible;\n\ \ there\ should\ not\ be\ two\ consecutive\ runs\ with\ exactly\ the\ same\ RGB\ color.\n\n\ \ @param\ x\ the\ x-coordinate\ of\ the\ pixel\ to\ modify.\n\ \ @param\ y\ the\ y-coordinate\ of\ the\ pixel\ to\ modify.\n\ \ @param\ red\ the\ new\ red\ intensity\ to\ store\ at\ coordinate\ (x,\ y).\n\ \ @param\ green\ the\ new\ green\ intensity\ to\ store\ at\ coordinate\ (x,\ y).\n\ \ @param\ blue\ the\ new\ blue\ intensity\ to\ store\ at\ coordinate\ (x,\ y).\n
comment11.params=b\ msg
comment11.target=void\ doTest(boolean,\ java.lang.String)
comment11.text=\n\ doTest()\ checks\ whether\ the\ condition\ is\ true\ and\ prints\ the\ given\ error\n\ message\ if\ it\ is\ not.\n\n\ @param\ b\ the\ condition\ to\ check.\n\ @param\ msg\ the\ error\ message\ to\ print\ if\ the\ condition\ is\ false.\n
comment12.params=pixels
comment12.target=PixImage\ array2PixImage(int[][])
comment12.text=\n\ array2PixImage()\ converts\ a\ 2D\ array\ of\ grayscale\ intensities\ to\n\ a\ grayscale\ PixImage.\n\n\ @param\ pixels\ a\ 2D\ array\ of\ grayscale\ intensities\ in\ the\ range\ 0...255.\n\ @return\ a\ new\ PixImage\ whose\ red,\ green,\ and\ blue\ values\ are\ equal\ to\n\ the\ input\ grayscale\ intensities.\n
comment13.params=rle\ x\ y\ intensity
comment13.target=void\ setAndCheckRLE(RunLengthEncoding,\ int,\ int,\ int)
comment13.text=\n\ setAndCheckRLE()\ sets\ the\ given\ coordinate\ in\ the\ given\ run-length\n\ encoding\ to\ the\ given\ value\ and\ then\ checks\ whether\ the\ resulting\n\ run-length\ encoding\ is\ correct.\n\n\ @param\ rle\ the\ run-length\ encoding\ to\ modify.\n\ @param\ x\ the\ x-coordinate\ to\ set.\n\ @param\ y\ the\ y-coordinate\ to\ set.\n\ @param\ intensity\ the\ grayscale\ intensity\ to\ assign\ to\ pixel\ (x,\ y).\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\n\ main()\ runs\ a\ series\ of\ tests\ of\ the\ run-length\ encoding\ code.\n
comment2.params=
comment2.target=int\ getWidth()
comment2.text=\n\ \ getWidth()\ returns\ the\ width\ of\ the\ image\ that\ this\ run-length\ encoding\n\ \ represents.\n\n\ \ @return\ the\ width\ of\ the\ image\ that\ this\ run-length\ encoding\ represents.\n
comment3.params=
comment3.target=int\ getHeight()
comment3.text=\n\ \ getHeight()\ returns\ the\ height\ of\ the\ image\ that\ this\ run-length\ encoding\n\ \ represents.\n\n\ \ @return\ the\ height\ of\ the\ image\ that\ this\ run-length\ encoding\ represents.\n
comment4.params=
comment4.target=RunIterator\ iterator()
comment4.text=\n\ \ iterator()\ returns\ a\ newly\ created\ RunIterator\ that\ can\ iterate\ through\n\ \ the\ runs\ of\ this\ RunLengthEncoding.\n\n\ \ @return\ a\ newly\ created\ RunIterator\ object\ set\ to\ the\ first\ run\ of\ this\n\ \ RunLengthEncoding.\n
comment5.params=
comment5.target=PixImage\ toPixImage()
comment5.text=\n\ \ toPixImage()\ converts\ a\ run-length\ encoding\ of\ an\ image\ into\ a\ PixImage\n\ \ object.\n\n\ \ @return\ the\ PixImage\ that\ this\ RunLengthEncoding\ encodes.\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\n\ \ toString()\ returns\ a\ String\ representation\ of\ this\ RunLengthEncoding.\n\n\ \ This\ method\ isn't\ required,\ but\ it\ should\ be\ very\ useful\ to\ you\ when\n\ \ you're\ debugging\ your\ code.\ \ It's\ up\ to\ you\ how\ you\ represent\n\ \ a\ RunLengthEncoding\ as\ a\ String.\n\n\ \ @return\ a\ String\ representation\ of\ this\ RunLengthEncoding.\n
comment7.params=image
comment7.target=RunLengthEncoding(PixImage)
comment7.text=\n\ \ RunLengthEncoding()\ (with\ one\ parameter)\ is\ a\ constructor\ that\ creates\n\ \ a\ run-length\ encoding\ of\ a\ specified\ PixImage.\n\ \n\ \ Note\ that\ you\ must\ encode\ the\ image\ in\ row-major\ format,\ i.e.,\ the\ second\n\ \ pixel\ should\ be\ (1,\ 0)\ and\ not\ (0,\ 1).\n\n\ \ @param\ image\ is\ the\ PixImage\ to\ run-length\ encode.\n
comment8.params=listz
comment8.target=void\ compress(DList1)
comment9.params=
comment9.target=void\ check()
comment9.text=\n\ \ check()\ walks\ through\ the\ run-length\ encoding\ and\ prints\ an\ error\ message\n\ \ if\ two\ consecutive\ runs\ have\ the\ same\ RGB\ intensities,\ or\ if\ the\ sum\ of\n\ \ all\ run\ lengths\ does\ not\ equal\ the\ number\ of\ pixels\ in\ the\ image.\n
numComments=15
